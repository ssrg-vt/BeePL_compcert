Require Import String ZArith Coq.FSets.FMapAVL Coq.Structures.OrderedTypeEx Coq.Strings.BinaryString.
Require Import Coq.FSets.FSetProperties Coq.FSets.FMapFacts FMaps FSetAVL Nat PeanoNat.
Require Import Coq.Arith.EqNat Coq.ZArith.Int Integers AST Maps Ctypes.
Require Import BeePL BeePL_Csyntax.


(************************************* Test Cases for translation of expressions *****************************************)

(******** Example1 ********) 
(* #include <stdio.h>
   void main() {
        int x;
   } 
*)

Definition x := 2%positive.
Compute (transBeePL_expr_st (Var 2%positive (BeeTypes.Ptype (BeeTypes.Tint)))).

(* Sdo
         (Evar 2%positive
            (Tint I32 Signed
               {| attr_volatile := false; attr_alignas := Some 4%N |}))
     : statement *)

(******** Example2 **********)
(* #include <stdio.h>
   int main() {
    int x;
    x = 2;
    return x;
   } 
*)
Definition bpl2 := (Bind x (BeeTypes.Ptype (BeeTypes.Tint)) (Const (ConsInt (Int.repr 2)) (BeeTypes.Ptype BeeTypes.Tint)) 
                    (Var x (BeeTypes.Ptype (BeeTypes.Tint))) (BeeTypes.Ptype BeeTypes.Tint)). 

Compute (transBeePL_expr_st bpl2).

(*      = Csyntax.Ssequence
         (Csyntax.Sdo
            (Csyntax.Eassign
               (Csyntax.Evar 2%positive
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
               (Csyntax.Eval
                  (Values.Vint {| Int.intval := 2; Int.intrange := Int.Z_mod_modulus_range' 2 |})
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})) Tvoid))
         (Csyntax.Sreturn
            (Some
               (Csyntax.Evalof
                  (Csyntax.Evar 2%positive
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))))
     : Csyntax.statement
 *)

(* Generated by compcert:
   Definition f_main := {|
   fn_return := tint;
   fn_callconv := cc_default;
   fn_params := nil;
   fn_vars := ((_x, tint) :: nil);
   fn_body :=
   (Ssequence
    (Ssequence
     (Sdo (Eassign (Evar _x tint) (Eval (Vint (Int.repr 2)) tint) tint))
     (Sreturn (Some (Evalof (Evar _x tint) tint))))
   (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
|}.
*) 

(********* Example3 ***********)
(* #include<stdio.h>
   int main() {
        int x = 1;
        int y = 2;
        if (x < y) then return x else y;
   }

val x = 2; val y = 3; if (x > y: Bfun) then x else y *)

Definition y := 3%positive.
Definition bpl3 := (Bind x (BeeTypes.Ptype (BeeTypes.Tint)) (Const (ConsInt (Int.repr 1)) (BeeTypes.Ptype BeeTypes.Tint)) 
                      (Bind y (BeeTypes.Ptype (BeeTypes.Tint)) (Const (ConsInt (Int.repr 2)) (BeeTypes.Ptype BeeTypes.Tint)) 
                            (Cond (Prim (Bop Gt) 
                                        ((Var x (BeeTypes.Ptype (BeeTypes.Tint))) :: (Var y (BeeTypes.Ptype (BeeTypes.Tint))) :: nil) 
                                        (BeeTypes.Ptype BeeTypes.Tbool))
                             (Var x (BeeTypes.Ptype (BeeTypes.Tint)))
                             (Var y (BeeTypes.Ptype (BeeTypes.Tint))) (BeeTypes.Ptype (BeeTypes.Tint)))
                       (BeeTypes.Ptype (BeeTypes.Tint)))
                    (BeeTypes.Ptype (BeeTypes.Tint))). 


Compute (transBeePL_expr_st bpl3).

(* Generated by our translation *)
(*      Csyntax.Ssequence
         (Csyntax.Sdo
            (Csyntax.Eassign
               (Csyntax.Evar 2%positive
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
               (Csyntax.Eval
                  (Values.Vint {| Int.intval := 1; Int.intrange := Int.Z_mod_modulus_range' 1 |})
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})) Tvoid))
         (Csyntax.Sdo
            (Csyntax.Ecomma
               (Csyntax.Eassign
                  (Csyntax.Evar 3%positive
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Csyntax.Eval
                     (Values.Vint {| Int.intval := 2; Int.intrange := Int.Z_mod_modulus_range' 2 |})
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
               (Csyntax.Econdition
                  (Csyntax.Ebinop Cop.Ogt
                     (Csyntax.Evar 2%positive
                        (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                     (Csyntax.Evar 3%positive
                        (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                     (Tint I8 Unsigned {| attr_volatile := false; attr_alignas := Some 1%N |}))
                  (Csyntax.Evar 2%positive
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Csyntax.Evar 3%positive
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
               (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})))
     : Csyntax.statement
 *)

(* Generated by Compcert *)
(*
Definition f_main := {|
  fn_return := tint;
  fn_callconv := cc_default;
  fn_params := nil;
  fn_vars := ((_x, tint) :: (_y, tint) :: nil);
  fn_body :=
(Ssequence
  (Ssequence
    (Sdo (Eassign (Evar _x tint) (Eval (Vint (Int.repr 1)) tint) tint))
    (Ssequence
      (Sdo (Eassign (Evar _y tint) (Eval (Vint (Int.repr 2)) tint) tint))
      (Sifthenelse (Ebinop Olt (Evalof (Evar _x tint) tint)
                     (Evalof (Evar _y tint) tint) tint)
        (Sreturn (Some (Evalof (Evar _x tint) tint)))
        (Sreturn (Some (Evalof (Evar _y tint) tint))))))
  (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
|}.*)

(****** Example 4 ********)
(* 
#include<stdio.h>
int main() {
        if (1) { return 1; }
        else return 0;
}
*)
Definition bpl4 := (Cond (Const (ConsInt (Int.repr 1)) (BeeTypes.Ptype BeeTypes.Tint))
                         (Const (ConsInt (Int.repr 1)) (BeeTypes.Ptype BeeTypes.Tint))
                         (Const (ConsInt (Int.repr 0)) (BeeTypes.Ptype BeeTypes.Tint)) (BeeTypes.Ptype BeeTypes.Tint)).

Compute (transBeePL_expr_st bpl4).

(* Generated by our translator *)
(*      = Csyntax.Sifthenelse
         (Csyntax.Eval
            (Values.Vint {| Int.intval := 1; Int.intrange := Int.Z_mod_modulus_range' 1 |})
            (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
         (Csyntax.Sreturn
            (Some
               (Csyntax.Evalof
                  (Csyntax.Eval
                     (Values.Vint {| Int.intval := 1; Int.intrange := Int.Z_mod_modulus_range' 1 |})
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))))
         (Csyntax.Sreturn
            (Some
               (Csyntax.Evalof
                  (Csyntax.Eval
                     (Values.Vint {| Int.intval := 0; Int.intrange := Int.Z_mod_modulus_range' 0 |})
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))))
     : Csyntax.statement *)

(* Generated by compcert *)
(* Definition f_main := {|
  fn_return := tint;
  fn_callconv := cc_default;
  fn_params := nil;
  fn_vars := nil;
  fn_body :=
  (Ssequence
        (Sifthenelse (Eval (Vint (Int.repr 1)) tint)
                     (Sreturn (Some (Eval (Vint (Int.repr 1)) tint)))
                     (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
                     (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
  |}. *)

(****** Example 5 ******)
(* 
#include <stdio.h>
int main() {
        if (1 < 2) {
                int r = 2 * 2;
                return r; }
        else return 0;
}
*)
Definition _r : ident := to_pos "r".
Definition r : ident := 5%positive.
Definition bpl5 := (Cond (Prim (Bop Lt)
                               ((Const (ConsInt (Int.repr 1)) (BeeTypes.Ptype BeeTypes.Tint)) ::
                                (Const (ConsInt (Int.repr 2)) (BeeTypes.Ptype BeeTypes.Tint)) :: nil) 
                         (BeeTypes.Ptype BeeTypes.Tint))
                         (Bind r (BeeTypes.Ptype (BeeTypes.Tint)) (Prim (Bop Mult)
                                                                         ((Const (ConsInt (Int.repr 2)) (BeeTypes.Ptype BeeTypes.Tint)) ::
                                                                          (Const (ConsInt (Int.repr 2)) (BeeTypes.Ptype BeeTypes.Tint)) :: nil) 
                                                                   (BeeTypes.Ptype BeeTypes.Tint))
                          (Var r (BeeTypes.Ptype (BeeTypes.Tint))) (BeeTypes.Ptype BeeTypes.Tint)) 
                          (Const (ConsInt (Int.repr 0)) (BeeTypes.Ptype BeeTypes.Tint)) (BeeTypes.Ptype BeeTypes.Tint)).

Compute (transBeePL_expr_st bpl5).

(* Generated using our translator *)
(*     = Sifthenelse
         (Ebinop Cop.Olt
            (Eval (Values.Vint {| Int.intval := 1; Int.intrange := Int.Z_mod_modulus_range' 1 |})
               (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
            (Eval (Values.Vint {| Int.intval := 2; Int.intrange := Int.Z_mod_modulus_range' 2 |})
               (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
            (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
         (Sdo
            (Ecomma
               (Eassign
                  (Evar 5%positive
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Ebinop Cop.Omul
                     (Eval
                        (Values.Vint
                           {| Int.intval := 2; Int.intrange := Int.Z_mod_modulus_range' 2 |})
                        (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                     (Eval
                        (Values.Vint
                           {| Int.intval := 2; Int.intrange := Int.Z_mod_modulus_range' 2 |})
                        (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
               (Evar 5%positive
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
               (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})))
         (Sreturn
            (Some
               (Evalof
                  (Eval
                     (Values.Vint
                        {| Int.intval := 0; Int.intrange := Int.Z_mod_modulus_range' 0 |})
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))))
     : statement*)

(* Generated by compcert *)
(*
Definition f_main := {|
  fn_return := tint;
  fn_callconv := cc_default;
  fn_params := nil;
  fn_vars := ((_r, tint) :: nil);
  fn_body :=
(Ssequence
  (Sifthenelse (Ebinop Olt (Eval (Vint (Int.repr 1)) tint)
                 (Eval (Vint (Int.repr 2)) tint) tint)
    (Ssequence
      (Sdo (Eassign (Evar _r tint)
             (Ebinop Omul (Eval (Vint (Int.repr 2)) tint)
               (Eval (Vint (Int.repr 2)) tint) tint) tint))
      (Sreturn (Some (Evalof (Evar _r tint) tint))))
    (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
  (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
|}.*)


(************************************* Test Cases for translation of function declaration *****************************************)

(***** Example1 *****)
(* #include <stdio.h>

   int add(int x1, int y1) {
        return  x1 + y1;
   }

   int main() {
        int r1 = add(add(1,2), 5);
        return r1;
   }
*) 
Definition add : ident := 5%positive.
Definition main : ident := 6%positive.
Definition x1 : ident := 2%positive.
Definition y1 : ident := 3%positive.
Definition r1 : ident := 4%positive. 
Definition f_add : decl := Fdecl {| fname := add;
                                    args := ((x1, (BeeTypes.Ptype BeeTypes.Tint)) :: (y1, (BeeTypes.Ptype BeeTypes.Tint)) :: nil); 
                                    lvars := nil;
                                    rtype := BeeTypes.Ptype BeeTypes.Tint; 
                                    body :=  (Bind r1 (BeeTypes.Ptype (BeeTypes.Tint))
                                                      (Prim (Bop Plus)
                                                            (Var x1 (BeeTypes.Ptype (BeeTypes.Tint)) :: Var y1 (BeeTypes.Ptype (BeeTypes.Tint)) :: nil)
                                                            (BeeTypes.Ptype (BeeTypes.Tint)))
                                                   (Var r1 (BeeTypes.Ptype (BeeTypes.Tint))) (BeeTypes.Ptype (BeeTypes.Tint))) |}.

Definition f_main : decl := Fdecl {| fname := main;
                                     args := nil;
                                     lvars := ((r1, (BeeTypes.Ptype BeeTypes.Tint)) :: nil); 
                                     rtype := BeeTypes.Ptype BeeTypes.Tint;
                                     body := (Bind r1 (BeeTypes.Ftype 
                                                                (BeeTypes.Ptype BeeTypes.Tint :: 
                                                                 BeeTypes.Ptype BeeTypes.Tint :: nil) nil 
                                                                (BeeTypes.Ptype BeeTypes.Tint))  
                                                      (App (Some r1) (Var add (BeeTypes.Ftype 
                                                                             (BeeTypes.Ptype BeeTypes.Tint :: 
                                                                              BeeTypes.Ptype BeeTypes.Tint :: nil) nil 
                                                                             (BeeTypes.Ptype BeeTypes.Tint)))  
                                                           ((App None (Var add (BeeTypes.Ptype BeeTypes.Tint))
                                                           ((Const (ConsInt (Int.repr 1)) (BeeTypes.Ptype BeeTypes.Tint)) ::
                                                           (Const (ConsInt (Int.repr 2)) (BeeTypes.Ptype BeeTypes.Tint)) :: nil)
                                                           (BeeTypes.Ptype BeeTypes.Tint)) ::
                                                           (Const (ConsInt (Int.repr 5)) (BeeTypes.Ptype BeeTypes.Tint)) :: nil)
                                                       (BeeTypes.Ptype BeeTypes.Tint))
                                                   (Var r1 (BeeTypes.Ptype (BeeTypes.Tint))) (BeeTypes.Ptype (BeeTypes.Tint))) |}. 
                                                  
Definition mexample1 : module := (((add, f_add) :: (main, f_main) :: nil), main).

Compute (BeePLdecl_gdef f_add).

(* add function declaration in csyntax generated by our translator *)
(*   = Gfun
         (Internal
            {|
              Csyntax.fn_return := Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |};
              Csyntax.fn_callconv := {| cc_vararg := Some 2%Z; cc_unproto := false; cc_structret := false |};
              Csyntax.fn_params :=
                (2%positive, Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})
                :: (3%positive, Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}) :: nil;
              Csyntax.fn_vars := nil;
              Csyntax.fn_body :=
                Csyntax.Ssequence
                  (Csyntax.Sdo
                     (Csyntax.Eassign
                        (Csyntax.Evar 4%positive
                           (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                        (Csyntax.Ebinop Cop.Oadd
                           (Csyntax.Evar 2%positive
                              (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                           (Csyntax.Evar 3%positive
                              (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                           (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})) Tvoid))
                  (Csyntax.Sreturn
                     (Some
                        (Csyntax.Evalof
                           (Csyntax.Evar 4%positive
                              (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                           (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))))
            |})
     : globdef (fundef Csyntax.function) type
 *)

(* Generated by CompCert *)
(* Definition f_add := {| fn_return := tint;
                          fn_callconv := cc_default;
                          fn_params := ((_x, tint) :: (_y, tint) :: nil);
                          fn_vars := nil;
                          fn_body := (Sreturn (Some (Ebinop Oadd (Evalof (Evar _x tint) tint)
                                     (Evalof (Evar _y tint) tint) tint))) 
                        |}. *)

Compute (BeePLdecl_gdef f_main).

(* main function declaration in csyntax generated by our translator *)

(*    = Gfun
         (Internal
            {|
              Csyntax.fn_return := Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |};
              Csyntax.fn_callconv := {| cc_vararg := Some 0%Z; cc_unproto := false; cc_structret := false |};
              Csyntax.fn_params := nil;
              Csyntax.fn_vars :=
                (4%positive, Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}) :: nil;
              Csyntax.fn_body :=
                Csyntax.Ssequence
                  (Csyntax.Sdo
                     (Csyntax.Eassign
                        (Csyntax.Evar 4%positive
                           (Tfunction
                              (Tcons (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})
                                 (Tcons (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})
                                    Tnil))
                              (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})
                              {| cc_vararg := Some 2%Z; cc_unproto := false; cc_structret := false |}))
                        (Csyntax.Ecall
                           (Csyntax.Evar 5%positive
                              (Tfunction
                                 (Tcons (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})
                                    (Tcons
                                       (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})
                                       Tnil))
                                 (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})
                                 {| cc_vararg := Some 2%Z; cc_unproto := false; cc_structret := false |}))
                           (Csyntax.Econs
                              (Csyntax.Ecall
                                 (Csyntax.Evar 5%positive
                                    (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                                 (Csyntax.Econs
                                    (Csyntax.Eval
                                       (Values.Vint
                                          {| Int.intval := 1; Int.intrange := Int.Z_mod_modulus_range' 1 |})
                                       (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                                    (Csyntax.Econs
                                       (Csyntax.Eval
                                          (Values.Vint
                                             {| Int.intval := 2; Int.intrange := Int.Z_mod_modulus_range' 2 |})
                                          (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                                       Csyntax.Enil))
                                 (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                              (Csyntax.Econs
                                 (Csyntax.Eval
                                    (Values.Vint {| Int.intval := 5; Int.intrange := Int.Z_mod_modulus_range' 5 |})
                                    (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                                 Csyntax.Enil))
                           (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})) Tvoid))
                  (Csyntax.Sreturn
                     (Some
                        (Csyntax.Evalof
                           (Csyntax.Evar 4%positive
                              (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                           (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))))
            |})
     : globdef (fundef Csyntax.function) type
 *)

(* Generated by Compcert *)
(* Definition f_main := {|
  fn_return := tint;
  fn_callconv := cc_default;
  fn_params := nil;
  fn_vars := ((_x, tint) :: nil);
  fn_body :=
(Ssequence
  (Ssequence
    (Sdo (Eassign (Evar _x tint)
           (Ecall
             (Evalof
               (Evar _add (Tfunction (Tcons tint (Tcons tint Tnil)) tint
                            cc_default))
               (Tfunction (Tcons tint (Tcons tint Tnil)) tint cc_default))
             (Econs
               (Ecall
                 (Evalof
                   (Evar _add (Tfunction (Tcons tint (Tcons tint Tnil)) tint
                                cc_default))
                   (Tfunction (Tcons tint (Tcons tint Tnil)) tint cc_default))
                 (Econs (Eval (Vint (Int.repr 1)) tint)
                   (Econs (Eval (Vint (Int.repr 2)) tint) Enil)) tint)
               (Econs (Eval (Vint (Int.repr 5)) tint) Enil)) tint) tint))
    (Sreturn (Some (Evalof (Evar _x tint) tint))))
  (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
|}. *)

Compute (BeePL_compcert mexample1).

(* The traslated program using our translator *)
(*  = {|
         AST.prog_defs :=
           (5%positive,
           Gfun
             (Internal
                {|
                  Csyntax.fn_return := Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |};
                  Csyntax.fn_callconv := {| cc_vararg := Some 2%Z; cc_unproto := false; cc_structret := false |};
                  Csyntax.fn_params :=
                    (2%positive, Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})
                    :: (3%positive, Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}) :: nil;
                  Csyntax.fn_vars := nil;
                  Csyntax.fn_body :=
                    Csyntax.Ssequence
                      (Csyntax.Sdo
                         (Csyntax.Eassign (Csyntax.Evar 4%positive (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                            (Csyntax.Ebinop Cop.Oadd
                               (Csyntax.Evar 2%positive (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                               (Csyntax.Evar 3%positive (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                               (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})) Tvoid))
                      (Csyntax.Sreturn
                         (Some
                            (Csyntax.Evalof
                               (Csyntax.Evar 4%positive (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                               (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))))
                |}))
           :: (6%positive,
              Gfun
                (Internal
                   {|
                     Csyntax.fn_return := Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |};
                     Csyntax.fn_callconv := {| cc_vararg := Some 0%Z; cc_unproto := false; cc_structret := false |};
                     Csyntax.fn_params := nil;
                     Csyntax.fn_vars := (4%positive, Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}) :: nil;
                     Csyntax.fn_body :=
                       Csyntax.Ssequence
                         (Csyntax.Sdo
                            (Csyntax.Eassign
                               (Csyntax.Evar 4%positive
                                  (Tfunction
                                     (Tcons (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})
                                        (Tcons (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}) Tnil))
                                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})
                                     {| cc_vararg := Some 2%Z; cc_unproto := false; cc_structret := false |}))
                               (Csyntax.Ecall
                                  (Csyntax.Evar 5%positive
                                     (Tfunction
                                        (Tcons (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})
                                           (Tcons (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}) Tnil))
                                        (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})
                                        {| cc_vararg := Some 2%Z; cc_unproto := false; cc_structret := false |}))
                                  (Csyntax.Econs
                                     (Csyntax.Ecall
                                        (Csyntax.Evar 5%positive (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                                        (Csyntax.Econs
                                           (Csyntax.Eval (Values.Vint {| Int.intval := 1; Int.intrange := Int.Z_mod_modulus_range' 1 |})
                                              (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                                           (Csyntax.Econs
                                              (Csyntax.Eval (Values.Vint {| Int.intval := 2; Int.intrange := Int.Z_mod_modulus_range' 2 |})
                                                 (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})) Csyntax.Enil))
                                        (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                                     (Csyntax.Econs
                                        (Csyntax.Eval (Values.Vint {| Int.intval := 5; Int.intrange := Int.Z_mod_modulus_range' 5 |})
                                           (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})) Csyntax.Enil))
                                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})) Tvoid))
                         (Csyntax.Sreturn
                            (Some
                               (Csyntax.Evalof
                                  (Csyntax.Evar 4%positive (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))))
                   |})) :: nil;
         AST.prog_public := nil;
         AST.prog_main := 6%positive
       |}
     : AST.program (fundef Csyntax.function) type
*)


(*** Convert while to a fixpoint ***)

(* 
  fun hello_ten()
  var i := 0
  while { i < 10 }
    println("hello")
    i := i + 1 *)

Fixpoint hello_ten (i : nat) (acc : list string) : list string :=
match i with 
| 0 => acc 
| S n => hello_ten (n) (("hello"%string :: nil) ++ acc)
end.

Compute (hello_ten(10)) nil.

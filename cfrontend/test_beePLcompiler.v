Require Import String ZArith Coq.FSets.FMapAVL Coq.Structures.OrderedTypeEx Coq.Strings.BinaryString.
Require Import Coq.FSets.FSetProperties Coq.FSets.FMapFacts FMaps FSetAVL Nat PeanoNat.
Require Import Coq.Arith.EqNat Coq.ZArith.Int Integers AST Maps Ctypes.
Require Import BeePL BeePL_Csyntax.


(************************************* Test Cases *****************************************)

(******** Example1 ********) 
(* #include <stdio.h>
   void main() {
        int x;
   } 
*)

Definition x := 2%positive.
Compute (transBeePL_expr_st (Var 2%positive (BeeTypes.Ptype (BeeTypes.Tint)))).

(* Sdo
         (Evar 2%positive
            (Tint I32 Signed
               {| attr_volatile := false; attr_alignas := Some 4%N |}))
     : statement *)

(******** Example2 **********)
(* #include <stdio.h>
   int main() {
    int x;
    x = 2;
    return x;
   } 
*)
Definition bpl2 := (Bind x (BeeTypes.Ptype (BeeTypes.Tint)) (Const (ConsInt (Int.repr 2)) (BeeTypes.Ptype BeeTypes.Tint)) 
                    (Var x (BeeTypes.Ptype (BeeTypes.Tint))) (BeeTypes.Ptype BeeTypes.Tint)). 

Compute (transBeePL_expr_st bpl2).

(* 
        = Ssequence
         (Sdo
            (Eassign
               (Evar 2%positive
                  (Tint I32 Signed
                     {|
                       attr_volatile := false;
                       attr_alignas := Some 4%N
                     |}))
               (Eval
                  (Values.Vint
                     {|
                       Int.intval := 2;
                       Int.intrange :=
                         Int.Z_mod_modulus_range'
                           2
                     |})
                  (Tint I32 Signed
                     {|
                       attr_volatile := false;
                       attr_alignas := Some 4%N
                     |})) Tvoid))
         (Sreturn
            (Some
               (Evalof
                  (Evar 2%positive
                     (Tint I32 Signed
                        {|
                          attr_volatile :=
                            false;
                          attr_alignas :=
                            Some 4%N
                        |}))
                  (Tint I32 Signed
                     {|
                       attr_volatile := false;
                       attr_alignas := Some 4%N
                     |}))))
     : statement
 *)

(* Generated by compcert:
   Definition f_main := {|
   fn_return := tint;
   fn_callconv := cc_default;
   fn_params := nil;
   fn_vars := ((_x, tint) :: nil);
   fn_body :=
   (Ssequence
    (Ssequence
     (Sdo (Eassign (Evar _x tint) (Eval (Vint (Int.repr 2)) tint) tint))
     (Sreturn (Some (Evalof (Evar _x tint) tint))))
   (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
|}.
*) 

(********* Example3 ***********)
(* #include<stdio.h>
   int main() {
        int x = 1;
        int y = 2;
        if (x < y) then return x else y;
   }

val x = 2; val y = 3; if (x > y: Bfun) then x else y *)

Definition y := 3%positive.
Definition bpl3 := (Bind x (BeeTypes.Ptype (BeeTypes.Tint)) (Const (ConsInt (Int.repr 1)) (BeeTypes.Ptype BeeTypes.Tint)) 
                      (Bind y (BeeTypes.Ptype (BeeTypes.Tint)) (Const (ConsInt (Int.repr 2)) (BeeTypes.Ptype BeeTypes.Tint)) 
                            (Cond (Prim (Bop Gt) 
                                        ((Var x (BeeTypes.Ptype (BeeTypes.Tint))) :: (Var y (BeeTypes.Ptype (BeeTypes.Tint))) :: nil) 
                                        (BeeTypes.Ptype BeeTypes.Tbool))
                             (Var x (BeeTypes.Ptype (BeeTypes.Tint)))
                             (Var y (BeeTypes.Ptype (BeeTypes.Tint))) (BeeTypes.Ptype (BeeTypes.Tint)))
                       (BeeTypes.Ptype (BeeTypes.Tint)))
                    (BeeTypes.Ptype (BeeTypes.Tint))). 


Compute (transBeePL_expr_st bpl3).

(* Generated by our translation *)
(*      = Ssequence
         (Sdo
            (Eassign
               (Evar 2%positive
                  (Tint I32 Signed
                     {| attr_volatile := false; attr_alignas := Some 4%N |}))
               (Eval
                  (Values.Vint
                     {|
                       Int.intval := 1;
                       Int.intrange := Int.Z_mod_modulus_range' 1
                     |})
                  (Tint I32 Signed
                     {| attr_volatile := false; attr_alignas := Some 4%N |}))
               Tvoid))
         (Sdo
            (Ecomma
               (Eassign
                  (Evar 3%positive
                     (Tint I32 Signed
                        {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Eval
                     (Values.Vint
                        {|
                          Int.intval := 2;
                          Int.intrange := Int.Z_mod_modulus_range' 2
                        |})
                     (Tint I32 Signed
                        {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Tint I32 Signed
                     {| attr_volatile := false; attr_alignas := Some 4%N |}))
               (Econdition
                  (Ebinop Cop.Ogt
                     (Evar 2%positive
                        (Tint I32 Signed
                           {|
                             attr_volatile := false; attr_alignas := Some 4%N
                           |}))
                     (Evar 3%positive
                        (Tint I32 Signed
                           {|
                             attr_volatile := false; attr_alignas := Some 4%N
                           |}))
                     (Tint I8 Unsigned
                        {| attr_volatile := false; attr_alignas := Some 1%N |}))
                  (Evar 2%positive
                     (Tint I32 Signed
                        {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Evar 3%positive
                     (Tint I32 Signed
                        {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Tint I32 Signed
                     {| attr_volatile := false; attr_alignas := Some 4%N |}))
               (Tint I32 Signed
                  {| attr_volatile := false; attr_alignas := Some 4%N |})))
     : statement
 *)

(* Generated by Compcert *)
(*
Definition f_main := {|
  fn_return := tint;
  fn_callconv := cc_default;
  fn_params := nil;
  fn_vars := ((_x, tint) :: (_y, tint) :: nil);
  fn_body :=
(Ssequence
  (Ssequence
    (Sdo (Eassign (Evar _x tint) (Eval (Vint (Int.repr 1)) tint) tint))
    (Ssequence
      (Sdo (Eassign (Evar _y tint) (Eval (Vint (Int.repr 2)) tint) tint))
      (Sifthenelse (Ebinop Olt (Evalof (Evar _x tint) tint)
                     (Evalof (Evar _y tint) tint) tint)
        (Sreturn (Some (Evalof (Evar _x tint) tint)))
        (Sreturn (Some (Evalof (Evar _y tint) tint))))))
  (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
|}.*)

(****** Example 4 ********)
(* 
#include<stdio.h>
int main() {
        if (1) { return 1; }
        else return 0;
}
*)
Definition bpl4 := (Cond (Const (ConsInt (Int.repr 1)) (BeeTypes.Ptype BeeTypes.Tint))
                         (Const (ConsInt (Int.repr 1)) (BeeTypes.Ptype BeeTypes.Tint))
                         (Const (ConsInt (Int.repr 0)) (BeeTypes.Ptype BeeTypes.Tint)) (BeeTypes.Ptype BeeTypes.Tint)).

Compute (transBeePL_expr_st bpl4).

(* Generated by our translator *)
(*      = Sifthenelse
         (Eval
            (Values.Vint
               {|
                 Int.intval := 1;
                 Int.intrange := Int.Z_mod_modulus_range' 1
               |})
            (Tint I32 Signed
               {| attr_volatile := false; attr_alignas := Some 4%N |}))
         (Sreturn
            (Some
               (Evalof
                  (Eval
                     (Values.Vint
                        {|
                          Int.intval := 1;
                          Int.intrange := Int.Z_mod_modulus_range' 1
                        |})
                     (Tint I32 Signed
                        {|
                          attr_volatile := false; attr_alignas := Some 4%N
                        |}))
                  (Tint I32 Signed
                     {|
                       attr_volatile := false; attr_alignas := Some 4%N
                     |}))))
         (Sreturn
            (Some
               (Evalof
                  (Eval
                     (Values.Vint
                        {|
                          Int.intval := 0;
                          Int.intrange := Int.Z_mod_modulus_range' 0
                        |})
                     (Tint I32 Signed
                        {|
                          attr_volatile := false; attr_alignas := Some 4%N
                        |}))
                  (Tint I32 Signed
                     {|
                       attr_volatile := false; attr_alignas := Some 4%N
                     |}))))
     : statement *)

(* Generated by compcert *)
(* Definition f_main := {|
  fn_return := tint;
  fn_callconv := cc_default;
  fn_params := nil;
  fn_vars := nil;
  fn_body :=
  (Ssequence
        (Sifthenelse (Eval (Vint (Int.repr 1)) tint)
                     (Sreturn (Some (Eval (Vint (Int.repr 1)) tint)))
                     (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
                     (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
  |}. *)

(****** Example 5 ******)
(* 
#include <stdio.h>
int main() {
        if (1 < 2) {
                int r = 2 * 2;
                return r; }
        else return 0;
}
*)
Definition _r : ident := to_pos "r".
Definition r : ident := 5%positive.
Definition bpl5 := (Cond (Prim (Bop Lt)
                               ((Const (ConsInt (Int.repr 1)) (BeeTypes.Ptype BeeTypes.Tint)) ::
                                (Const (ConsInt (Int.repr 2)) (BeeTypes.Ptype BeeTypes.Tint)) :: nil) 
                         (BeeTypes.Ptype BeeTypes.Tint))
                         (Bind r (BeeTypes.Ptype (BeeTypes.Tint)) (Prim (Bop Mult)
                                                                         ((Const (ConsInt (Int.repr 2)) (BeeTypes.Ptype BeeTypes.Tint)) ::
                                                                          (Const (ConsInt (Int.repr 2)) (BeeTypes.Ptype BeeTypes.Tint)) :: nil) 
                                                                   (BeeTypes.Ptype BeeTypes.Tint))
                          (Var r (BeeTypes.Ptype (BeeTypes.Tint))) (BeeTypes.Ptype BeeTypes.Tint)) 
                          (Const (ConsInt (Int.repr 0)) (BeeTypes.Ptype BeeTypes.Tint)) (BeeTypes.Ptype BeeTypes.Tint)).

Compute (transBeePL_expr_st bpl5).

(* Generated using our translator *)
(*     = Sifthenelse
         (Ebinop Cop.Olt
            (Eval (Values.Vint {| Int.intval := 1; Int.intrange := Int.Z_mod_modulus_range' 1 |})
               (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
            (Eval (Values.Vint {| Int.intval := 2; Int.intrange := Int.Z_mod_modulus_range' 2 |})
               (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
            (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
         (Sdo
            (Ecomma
               (Eassign
                  (Evar 5%positive
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Ebinop Cop.Omul
                     (Eval
                        (Values.Vint
                           {| Int.intval := 2; Int.intrange := Int.Z_mod_modulus_range' 2 |})
                        (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                     (Eval
                        (Values.Vint
                           {| Int.intval := 2; Int.intrange := Int.Z_mod_modulus_range' 2 |})
                        (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
               (Evar 5%positive
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
               (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |})))
         (Sreturn
            (Some
               (Evalof
                  (Eval
                     (Values.Vint
                        {| Int.intval := 0; Int.intrange := Int.Z_mod_modulus_range' 0 |})
                     (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))
                  (Tint I32 Signed {| attr_volatile := false; attr_alignas := Some 4%N |}))))
     : statement*)

(* Generated by compcert *)
(*
Definition f_main := {|
  fn_return := tint;
  fn_callconv := cc_default;
  fn_params := nil;
  fn_vars := ((_r, tint) :: nil);
  fn_body :=
(Ssequence
  (Sifthenelse (Ebinop Olt (Eval (Vint (Int.repr 1)) tint)
                 (Eval (Vint (Int.repr 2)) tint) tint)
    (Ssequence
      (Sdo (Eassign (Evar _r tint)
             (Ebinop Omul (Eval (Vint (Int.repr 2)) tint)
               (Eval (Vint (Int.repr 2)) tint) tint) tint))
      (Sreturn (Some (Evalof (Evar _r tint) tint))))
    (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
  (Sreturn (Some (Eval (Vint (Int.repr 0)) tint))))
|}.*)
